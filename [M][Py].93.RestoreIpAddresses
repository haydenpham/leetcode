class Solution(object):
    def restoreIpAddresses(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        # 256.256.256.256
        if len(s) > 12 or len(s) < 4:
            return []
        return self.restoreIpAddressesHelper(s, 4)

    def restoreIpAddressesHelper(self, s, r):
        """
        :param r: remaining octet
        :type s: str
        :type r:  int
        :rtype List[str]
        """
        if len(s) > 3 * r or len(s) < r:
            return []
        if r == 1 and len(s) < 4:
            # s must be less than 3 digits, and not start with 0, and less than 256
            if len(s) > 3 or (len(s) > 1 and s[0] == '0') or (s and int(s) > 255):
                return []
            return [s] if s else []
        
        returnList = []
        # select first digit
        if s:
            for i in self.restoreIpAddressesHelper(s[1:], r - 1):
                returnList.append(s[0] + "." + i)

        # select first 2 digits
        if len(s) >= 2 and s[0] != '0':  # check for leading zero
            for i in self.restoreIpAddressesHelper(s[2:], r - 1):
                returnList.append(s[:2] + "." + i)

        # select first 3 digits
        if len(s) >= 3 and s[0] != '0' and int(s[:3]) < 256:  # check for leading zero and valid number
            for i in self.restoreIpAddressesHelper(s[3:], r - 1):
                returnList.append(s[:3] + "." + i)
        return returnList
        
