### BACKTRACKING SOLUTION
import math


class Solution(object):
    def minFallingPathSum(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        rows = len(matrix)
        cols = len(matrix[0])
        minFallingPath = math.inf
        for i in range(0, cols):
            minFallingPath = min(minFallingPath, self.minFallingPathSumRec(matrix, 0, i))
        return minFallingPath

    def minFallingPathSumRec(self, matrix, i, j):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        rows = len(matrix)
        cols = len(matrix[0])
        below = math.inf
        diagonal_left = math.inf
        diagonal_right = math.inf

        # check if last row
        if i == rows - 1:
            return matrix[i][j]
        else:
            below = self.minFallingPathSumRec(matrix, i+1, j)
        # check if first column
        if j != 0:
            diagonal_left = self.minFallingPathSumRec(matrix, i+1, j-1)
        # check if last column
        if j != cols - 1:
            diagonal_right = self.minFallingPathSumRec(matrix, i+1, j+1)
        return matrix[i][j] + min(below, diagonal_left, diagonal_right)

### BACKTRACKING SOLUTION ABOVE

### DYNAMIC PROGRAMMING SOLUTION
class Solution(object):
    def minFallingPathSum(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        rows = len(matrix)
        cols = len(matrix[0])
        dp = [[0 for _ in range(cols)] for _ in range(rows)]

        # initialization
        for i in range(0, cols):
            dp[0][i] = matrix[0][i]

        for i in range(1, rows):
            for j in range(0, cols):
                # first col
                if j == 0:
                    dp[i][j] = min(dp[i-1][j], dp[i-1][j+1]) + matrix[i][j]
                # last col
                elif j == cols - 1:
                    dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + matrix[i][j]
                # middle col
                else:
                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i-1][j+1]) + matrix[i][j]

        return min(dp[-1])

### DYNAMIC PROGRAMMING SOLUTION ABOVE






