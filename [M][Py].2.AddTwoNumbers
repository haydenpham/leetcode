# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: Optional[ListNode]
        :type l2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        if not l1 and not l2:
            return None
        if not l1:
            return l2
        if not l2:
            return l1

        return self.addTwoNumbersHelper(l1, l2, False)

    def addTwoNumbersHelper(self, l1, l2, carry):
        """
        :type l1: Optional[ListNode]
        :type l2: Optional[ListNode]
        :type carry: bool
        :rtype: Optional[ListNode]
        """
        if not l1 and not l2:
            if carry:
                return ListNode(1)
            return None
        if not l1:
            return self.addTwoNumbersHelper(ListNode(0), l2, carry)
        if not l2:
            return self.addTwoNumbersHelper(l1, ListNode(0), carry)

        sum = l1.val + l2.val + carry
        carry = sum >= 10
        sum = sum % 10
        l = ListNode(sum)
        l.next = self.addTwoNumbersHelper(l1.next, l2.next, carry)
        return l
